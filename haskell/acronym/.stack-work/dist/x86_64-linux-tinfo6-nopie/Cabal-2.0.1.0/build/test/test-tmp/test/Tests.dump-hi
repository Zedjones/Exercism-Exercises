
==================== FINAL INTERFACE ====================
2018-05-01 04:09:40.266149417 UTC

interface main:Main 8022
  interface hash: 5fe391a1409e15f3c26c197ef53738e8
  ABI hash: 2b094d9a6054fc4a05dbaa647023336f
  export-list hash: 89b5284fe972275c3248f7c4a5590eab
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 65b20852ed97bad1c833e940e74a5988
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.10.1
                      acronym-1.3.0.5 ansi-terminal-0.8.0.2 array-0.5.2.0 base-4.10.1.0
                      call-stack-0.1.0 colour-2.3.4 containers-0.5.10.2 deepseq-1.4.3.0
                      directory-1.3.0.2 filepath-1.4.1.2 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 hspec-2.4.8 hspec-core-2.4.8
                      hspec-expectations-0.8.2 integer-gmp-1.0.1.0 pretty-1.1.3.3
                      primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.4.5.0 template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.8:Test.Hspec.Core.Example
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  acronym-1.3.0.5:Acronym 12fb6e210064ca6cb4c3a39b2e7463c3
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hspec-2.4.8:Test.Hspec 4a09dd761f5419a640be51767630e5c4
import  -/  hspec-2.4.8:Test.Hspec.Runner d255ae9bd12c1bb228809e6e3ed94d28
import  -/  hspec-core-2.4.8:Test.Hspec.Core.Options 5c579672f8ae59c431df2842a1bad365
import  -/  hspec-core-2.4.8:Test.Hspec.Core.Runner fecb16ba562c55ffbd8f6859202ad5d3
import  -/  hspec-core-2.4.8:Test.Hspec.Core.Spec 8115ee228e269080204503e1dc84918b
import  -/  hspec-core-2.4.8:Test.Hspec.Core.Spec.Monad 3d6f6056e95b962121bf361a495237f5
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 8bc0d926d5b42398a254e04604809fe4
a18e4bb2f0674ee24612719199a84dab
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
8f010006a57838aae2252530b9cbf5fc
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4f883606fd905089344438718b2c630
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
fb54e6971b8cdb3d6eb813b73e5967b8
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
d6f1567c5e9fb74d00e1be64470ce3d3
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
58b716424161078f8cb439172cdb7bf6
  $wf1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.SpecTree
              (Test.Hspec.Core.Example.Arg
                 Test.Hspec.Expectations.Expectation)]) #)
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# w,
                    (GHC.Tuple.(),
                     GHC.Types.:
                       @ (Test.Hspec.Core.Tree.SpecTree
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                       (Test.Hspec.Core.Tree.Leaf
                          @ (Test.Hspec.Core.Example.ActionWith
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          @ (Test.Hspec.Core.Tree.Item
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Item
                             @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                             (case ww of wild {
                                [] -> Test.Hspec.Core.Tree.specItem1 : ds1 ds2 -> wild })
                             Main.main44
                             GHC.Types.False
                             (Test.Hspec.Core.Example.safeEvaluateExample1
                                @ Test.Hspec.Expectations.Expectation
                                Test.Hspec.Core.Example.$fExampleIO1
                                  `cast`
                                (Trans
                                     (<Test.Hspec.Expectations.Expectation>_R
                                      ->_R <Test.Hspec.Core.Example.Params>_R
                                      ->_R <(Test.Hspec.Core.Example.Arg
                                               Test.Hspec.Expectations.Expectation
                                             -> GHC.Types.IO ())
                                            -> GHC.Types.IO ()>_R
                                      ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Test.Hspec.Core.Example.Result>_R))
                                     (Sym (Test.Hspec.Core.Example.N:Example[0]
                                               <Test.Hspec.Expectations.Expectation>_N)))
                                (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 let {
                                   eta1 :: GHC.Base.String
                                   = Acronym.abbreviate_go1
                                       (Acronym.abbreviate_go
                                          (GHC.Base.map
                                             @ GHC.Types.Char
                                             @ GHC.Types.Char
                                             Acronym.fixString
                                             ww1))
                                 } in
                                 case GHC.Base.eqString eta1 ww2 of wild {
                                   GHC.Types.False -> Main.main43 eta2 eta1 ww2
                                   GHC.Types.True -> (# eta2, GHC.Tuple.() #) })
                                  `cast`
                                (Sym (GHC.Types.N:IO[0] <()>_R)))
                               `cast`
                             (<Test.Hspec.Core.Example.Params>_R
                              ->_R <Test.Hspec.Core.Example.ActionWith
                                      (Test.Hspec.Core.Example.Arg
                                         Test.Hspec.Expectations.Expectation)
                                    -> GHC.Types.IO ()>_R
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.Either.Either
                                               GHC.Exception.SomeException
                                               Test.Hspec.Core.Example.Result>_R))))
                       (GHC.Types.[]
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation)))) #)) -}
cc5d9e63f5ac6e50097b46a257200a49
  data Case
    = Case {description :: GHC.Base.String,
            input :: GHC.Base.String,
            expected :: GHC.Base.String}
cc5d9e63f5ac6e50097b46a257200a49
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
cc5d9e63f5ac6e50097b46a257200a49
  expected :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
cc5d9e63f5ac6e50097b46a257200a49
  input :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
3249571190a66ec75656a52af049d3bc
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ec7736fcbb614cd9e789babd9fa0b800
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main58
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
61533fa78791fb62ae95452919aba65f
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Complementary metal-oxide semiconductor"#) -}
7436dca41024273842e7ff59ab83a4bc
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main12) -}
174fa53cf633fe7c0390d70067185abc
  main12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("punctuation without whitespace"#) -}
205fc86deee7b64f6f98d65c332d95ce
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main14) -}
f47c68a27016c7ac95eeb467ab942266
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GIMP"#) -}
c5b082b42246f01338166f6a7fb017f9
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main16) -}
ed493d532296c2ea2538fced976c7c06
  main16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GNU Image Manipulation Program"#) -}
287e9ad1a9e6376b882d691539f63b63
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main18) -}
792e2129a73f8c0cad07044b074c8a03
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("all caps word"#) -}
5fc96ff08aecfcda34e84836d22a81df
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main20) -}
3e665c56497267bb75dc73c7252ac766
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.Tree
              (Test.Hspec.Core.Example.ActionWith ())
              (Test.Hspec.Core.Tree.Item ())]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Main.$wf1 Main.main41 Main.main39 Main.main37 eta)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds { (#,#) ipv ipv1 ->
                 case (Main.$wf1 Main.main35 Main.main33 Main.main31 ipv)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds1 { (#,#) ipv2 ipv3 ->
                 case (Main.$wf1 Main.main29 Main.main27 Main.main25 ipv2)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds2 { (#,#) ipv4 ipv5 ->
                 case (Main.$wf1 Main.main23 Main.main21 Main.main19 ipv4)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds3 { (#,#) ipv6 ipv7 ->
                 case (Main.$wf1 Main.main17 Main.main15 Main.main13 ipv6)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds4 { (#,#) ipv8 ipv9 ->
                 case (Main.$wf1 Main.main11 Main.main9 Main.main7 ipv8)
                        `cast`
                      (Nth:3
                           (Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <((),
                                            [Test.Hspec.Core.Tree.SpecTree
                                               (Test.Hspec.Core.Example.Arg
                                                  Test.Hspec.Expectations.Expectation)])>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                               <[Test.Hspec.Core.Tree.SpecTree
                                                   (Test.Hspec.Core.Example.Arg
                                                      Test.Hspec.Expectations.Expectation)]>_N
                                               <GHC.Types.IO>_R
                                               <()>_N))
                                     (Trans
                                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                    (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                          (Trans
                                               (Nth:2
                                                    (Trans
                                                         (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                              <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N
                                                          ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                   <()>_N <()>_N)
                                                         (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                             [Test.Hspec.Core.Tree.SpecTree ()]
                                                             GHC.Types.IO
                                                             ()>_R
                                                          ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                  [Test.Hspec.Core.Tree.SpecTree ()]
                                                                  GHC.Types.IO
                                                                  ()>_R
                                                          ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                   <[Test.Hspec.Core.Tree.SpecTree
                                                                       ()]>_N
                                                                   <GHC.Types.IO>_R
                                                                   <()>_N)))
                                               (Trans
                                                    (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                         <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)
                                                    (GHC.Types.N:IO[0]
                                                         <((),
                                                           [Test.Hspec.Core.Tree.SpecTree
                                                              ()])>_R))))))) of ds5 { (#,#) ipv10 ipv11 ->
                 (# ipv10,
                    (GHC.Tuple.(),
                     GHC.Types.:
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (Test.Hspec.Core.Tree.Node
                          @ (Test.Hspec.Core.Example.ActionWith ())
                          @ (Test.Hspec.Core.Tree.Item ())
                          Main.main3
                          (case ipv1 of wild { (,) a1 w1 ->
                           GHC.Base.++
                             @ (Test.Hspec.Core.Tree.Tree
                                  (Test.Hspec.Core.Example.ActionWith ())
                                  (Test.Hspec.Core.Tree.Item ()))
                             w1
                             (case ipv3 of wild1 { (,) a2 w2 ->
                              GHC.Base.++
                                @ (Test.Hspec.Core.Tree.Tree
                                     (Test.Hspec.Core.Example.ActionWith ())
                                     (Test.Hspec.Core.Tree.Item ()))
                                w2
                                (case ipv5 of wild2 { (,) a3 w3 ->
                                 GHC.Base.++
                                   @ (Test.Hspec.Core.Tree.Tree
                                        (Test.Hspec.Core.Example.ActionWith ())
                                        (Test.Hspec.Core.Tree.Item ()))
                                   w3
                                   (case ipv7 of wild3 { (,) a4 w4 ->
                                    GHC.Base.++
                                      @ (Test.Hspec.Core.Tree.Tree
                                           (Test.Hspec.Core.Example.ActionWith ())
                                           (Test.Hspec.Core.Tree.Item ()))
                                      w4
                                      (case ipv9 of wild4 { (,) a5 w5 ->
                                       GHC.Base.++
                                         @ (Test.Hspec.Core.Tree.Tree
                                              (Test.Hspec.Core.Example.ActionWith ())
                                              (Test.Hspec.Core.Tree.Item ()))
                                         w5
                                         (case ipv11 of wild5 { (,) a6 w6 -> w6 }) }) }) }) }) }))
                       (GHC.Types.[]
                          @ (Test.Hspec.Core.Tree.Tree
                               (Test.Hspec.Core.Example.ActionWith ())
                               (Test.Hspec.Core.Tree.Item ())))) #) } } } } } }) -}
6d15b91759d97198b1ec9aa8878e19d0
  main20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FIFO"#) -}
728d557d5355f7ba9da387070fc129a1
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
cc4ccc36e9c106e67420668b43e9fa3c
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("First In, First Out"#) -}
25c9bf7626de3bc199223d98cdb81a4b
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main24) -}
fa16622aca40c8965df1dc7ba0a2ee66
  main24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("punctuation"#) -}
e1e50cc5ee7ee43b209ea12438d9a2b8
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main26) -}
ea351b1144597a5dd1b33057876d2bba
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HTML"#) -}
55d51ffa94240796b6b413eb461d2172
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main28) -}
69b4c637db92900e9fa67d752c87de73
  main28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HyperText Markup Language"#) -}
cf70d284fce32d7984359027f1f563b1
  main29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main30) -}
67c533a6f9c953c4c7dfa5849389a6ba
  main3 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.: @ GHC.Types.Char Main.main6 Main.main4) -}
b16e52f9e2513e4a679453c6d7b6cd7d
  main30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("camelcase"#) -}
65fc9a2fb4595dd47d067df56aa76393
  main31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main32) -}
d853679a0eba5b0439987abcd959576e
  main32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ROR"#) -}
98bd95976b14750515013e0f210f0325
  main33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main34) -}
5f4048955e5ecf2309278f1b98e922f5
  main34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ruby on Rails"#) -}
09993305c3acffa8d69ab6b8a61d1a48
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main36) -}
9cadfde40b02812eb5e05f72234bac40
  main36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lowercase words"#) -}
ed00a1bc98e47c95faa86ea4bc0995a0
  main37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main38) -}
6cef4dcbf4c5619da2b06c4a277e983d
  main38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PNG"#) -}
40b704f36f72f8e1e9c24f83afdae710
  main39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main40) -}
fa098bcbd9ab1d0eeb6ec6c64a18750b
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main5) -}
d584ae428c24f9494768ff0321fb0ddf
  main40 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Portable Network Graphics"#) -}
c7291070374c3b3654d0ecad42777222
  main41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main42) -}
15a72a183a677119296e9c64806e3a81
  main42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("basic"#) -}
3f1597b05bfd83578632f775dd15f8a0
  main43 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <B,U><B,1*U><B,1*U>x -}
c97f894c728e3b7ea2b2e88d850037f6
  main44 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (Test.Hspec.Core.Tree.specItem13 Main.main45) -}
5f832a3289c04ae48c23a2eea83e8e89
  main45 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem11
                   Test.Hspec.Core.Tree.specItem3
                   Main.main46) -}
5be6a46e6a61c97048e565f55c79eeed
  main46 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it1
                   Main.main47) -}
876a41ba985022f42136c5ee338683ec
  main47 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main56
                   Main.main48
                   GHC.Stack.Types.EmptyCallStack) -}
54e6ce49237db8368fe46f825f9733e4
  main48 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main55
                   Main.main54
                   Main.main52
                   Main.main51
                   Main.main50
                   Main.main51
                   Main.main49) -}
b552fd5eb3505ed87df7808a11c7c179
  main49 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 36#) -}
95b0d2a92dd882b4519808c1d2427ec4
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bbreviate"#) -}
7437593d1c078450c2384ce4d9f4fee5
  main50 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 22#) -}
ba809f4175a973bd062f760c78380c34
  main51 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
3b8d1b82d41f1c913705c6c80a808182
  main52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main53) -}
5c422560679d004d361561d04e7463cf
  main53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test/Tests.hs"#) -}
d32b83e6b6bda9cb1d61c7bc1183919f
  main54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
0ab8fc98aa905c29928a981bf0acc0a6
  main55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
d122f0fb3926d5d2a1672e12fa2a99c7
  main56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main57) -}
cfb9dfe62f9f51eb954ffd38a6711c5b
  main57 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
27d080886f3e2cc5975a5996d23b70e4
  main58 :: Test.Hspec.Core.Options.Config
  {- Unfolding: (Test.Hspec.Core.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
b27d6ff8df5f65324fbe8b1512acf6bd
  main59 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
0f6f1f0a096219100c0289d28f4af535
  main6 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'a'#) -}
3c35037e621dbe32f8fc7c81c73572dd
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
0084a947310767deeb2754245bdac1eb
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CMOS"#) -}
844541a840249d8a69532ed675571b30
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main10) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

