
==================== FINAL INTERFACE ====================
2018-04-30 19:00:30.139763055 UTC

interface sum-of-multiples-1.2.0.5-IZxbyblmMbIFdM2i99EHXB:SumOfMultiples 8022
  interface hash: 5238731023e40817b5bfbd3ab729107e
  ABI hash: 5fa9920fb346ecc00ad33fb82f20c23c
  export-list hash: 07d6cfdf22e78526ed03d035640c1584
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 26e0ff4b0ff758fc4ebf6a516aed248e
  sig of: Nothing
  used TH splices: False
  where
exports:
  SumOfMultiples.sumOfMultiples
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
5b63119bba2ff565ddbdc2992bf17210
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SumOfMultiples.$trModule3
                   SumOfMultiples.$trModule1) -}
706f3d6039aab79fec9dc27c04915787
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SumOfMultiples.$trModule2) -}
f618040728c96b5c9c07527ce12bd1fe
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SumOfMultiples"#) -}
e850a395aedc844358f4ed5c33ef920a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SumOfMultiples.$trModule4) -}
002be40f44a0005d52fb27e0195d8bca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("sum-of-multiples-1.2.0.5-IZxbyblmMbIFdM2i99EHXB"#) -}
1e52a9d353d584d8e09d38bccecc65f6
  sumOfMultiples ::
    [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (factors :: [GHC.Integer.Type.Integer])
                   (limit :: GHC.Integer.Type.Integer) ->
                 let {
                   lim :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger
                       limit
                       SumOfMultiples.sumOfMultiples2
                 } in
                 letrec {
                   go :: GHC.Integer.Type.Integer
                         -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                     <join 2> {- Arity: 2, Strictness: <S,U><L,U> -}
                   = \ (x :: GHC.Integer.Type.Integer)
                       (eta :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.gtInteger# x lim of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> let {
                            lvl :: GHC.Integer.Type.Integer
                            = GHC.Integer.Type.plusInteger eta x
                          } in
                          letrec {
                            go1 :: [GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [GHC.Integer.Type.Integer]) ->
                              case ds of wild2 {
                                []
                                -> go
                                     (GHC.Integer.Type.plusInteger x SumOfMultiples.sumOfMultiples2)
                                     eta
                                : y ys
                                -> case GHC.Integer.Type.eqInteger#
                                          y
                                          SumOfMultiples.sumOfMultiples1 of wild3 { DEFAULT ->
                                   case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Integer.Type.eqInteger#
                                               (GHC.Integer.Type.modInteger x y)
                                               SumOfMultiples.sumOfMultiples1 of wild5 { DEFAULT ->
                                        case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild5 of wild6 {
                                          GHC.Types.False -> go1 ys
                                          GHC.Types.True
                                          -> go
                                               (GHC.Integer.Type.plusInteger
                                                  x
                                                  SumOfMultiples.sumOfMultiples2)
                                               lvl } }
                                     GHC.Types.True
                                     -> case GHC.Real.divZeroError
                                        ret_ty GHC.Integer.Type.Integer
                                        of {} } } }
                          } in
                          go1 factors
                       GHC.Types.True -> eta } }
                 } in
                 go
                   SumOfMultiples.sumOfMultiples2
                   SumOfMultiples.sumOfMultiples1) -}
ba2badd685a47ac9d2bba717a85750c9
  sumOfMultiples1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
11b47cddf8bb5ffd97b974fe844e7ee0
  sumOfMultiples2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

