
==================== FINAL INTERFACE ====================
2018-05-04 16:11:03.539377878 UTC

interface accumulate-0.1.0.2-BqceH2M9ImsJrxKLX3tHAY:Accumulate 8022
  interface hash: dfe6fc1641b18f63cdfdef9456dd13e9
  ABI hash: fb1a52980492a1a796a2457b4054126c
  export-list hash: 0557caa84ced3e1435b5a8cc384507f0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 26e0ff4b0ff758fc4ebf6a516aed248e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Accumulate.accumulate
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
5fda9c8e8d318bc07d950424b0ea110e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Accumulate.$trModule3
                   Accumulate.$trModule1) -}
279b31b8e1e65bc69e8127ebfa9b79eb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Accumulate.$trModule2) -}
3d415e901465ef67d39790fe71ad1a4e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Accumulate"#) -}
91f483c6403f4c1f452cf67b1d52fe06
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Accumulate.$trModule4) -}
02df92bb9f7f1e5329f65f792136c0e6
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("accumulate-0.1.0.2-BqceH2M9ImsJrxKLX3tHAY"#) -}
073b78f316ee66aa16d5f75d9ad60d35
  accumulate :: (a -> b) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a @ b (f :: a -> b) (xs :: [a]) ->
                 letrec {
                   go :: [a] -> [b] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ b : y ys -> GHC.Types.: @ b (f y) (go ys) }
                 } in
                 go xs) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

